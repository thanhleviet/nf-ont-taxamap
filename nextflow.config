manifest {
    name              = 'nf-ont-taxonomy'
    mainScript        = 'main.nf'
    description       = 'A Nextflow pipeline for taxonomic profiling ONT reads'
    author            = 'Thanh Le Viet'
    version           = '0.1'
    nextflowVersion   = '>=23.0.0'
}

plugins {
    id 'nf-validation@0.1.0'
}

includeConfig './config/base.conf'
includeConfig './config/params.conf'
includeConfig './config/modules.conf'
// includeConfig './config/climb.conf'
// includeConfig './config/mail.conf'

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']


profiles {

    debug { process.beforeScript = 'echo $HOSTNAME' }
    
    tower {
        tower {
            accessToken = 'eyJ0aWQiOiAzMTI3fS4xZWM5MjUzNTQyMzNkNjgxMjhiNGRiM2U1ZGZmY2Y4ZDVhMjNjMTZi'
            enabled = true
        }
    }
    
    conda {
        conda.enabled          = true
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    
    mamba {
        conda.useMamba         = true
    }

    micromamba {
        conda.useMicromamba    = true
    }

    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }

    wave {
        wave.enabled           = true
        wave.strategy          = ['conda']
        wave.build.conda.basePackages = ['conda-forge::procps-ng']
    }
    
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}


trace {
    enabled = true
    overwrite = true
    file = 'ONT-Metagenomics-Pipeline-Trace.txt'
}

report {
    enabled = true
    file = 'ONT-Metagenomics-Pipeline-Report.html'
}